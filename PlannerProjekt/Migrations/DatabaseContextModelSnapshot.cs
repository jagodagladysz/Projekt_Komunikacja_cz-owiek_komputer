// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlannerProjekt;

#nullable disable

namespace PlannerProjekt.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("PlannerProjekt.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PlannerProjekt.Entities.SetTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SetTimes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimeFrom = new DateTime(2024, 7, 1, 21, 19, 15, 911, DateTimeKind.Local).AddTicks(3391),
                            TimeTo = new DateTime(2024, 7, 1, 21, 19, 15, 911, DateTimeKind.Local).AddTicks(3439),
                            Type = "Default"
                        },
                        new
                        {
                            Id = 2,
                            TimeFrom = new DateTime(2024, 7, 1, 8, 0, 0, 0, DateTimeKind.Local),
                            TimeTo = new DateTime(2024, 7, 1, 16, 0, 0, 0, DateTimeKind.Local),
                            Type = "WorkTime"
                        },
                        new
                        {
                            Id = 3,
                            TimeFrom = new DateTime(2024, 7, 1, 18, 0, 0, 0, DateTimeKind.Local),
                            TimeTo = new DateTime(2024, 7, 1, 21, 0, 0, 0, DateTimeKind.Local),
                            Type = "FreeTime"
                        });
                });

            modelBuilder.Entity("PlannerProjekt.Entities.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SetTimeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SetTimeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "admin",
                            Password = "$2a$11$n8comy/lVBKJuL5OyFWoaebXvi8LLuVfs026OzlnMHQY64tT2Z.J2",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("PlannerProjekt.Entities.Category", b =>
                {
                    b.HasOne("PlannerProjekt.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.SubTask", b =>
                {
                    b.HasOne("PlannerProjekt.Entities.Task", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.Task", b =>
                {
                    b.HasOne("PlannerProjekt.Entities.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlannerProjekt.Entities.SetTime", "SetTime")
                        .WithMany()
                        .HasForeignKey("SetTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PlannerProjekt.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SetTime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.Category", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.Task", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("PlannerProjekt.Entities.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
